# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

output_directory = './fastlane/Test Output/'
coverage_directory = '/coverage'

default_platform(:ios)

platform :ios do
  desc "Runs the tests"
  lane :test do |options|
    scan(
      scheme: "TwilioVerify",
      testplan: options[:test_plan],
      workspace: "TwilioVerify.xcworkspace",
      device: "iPhone 11",
      reset_simulator: true,
      code_coverage: true,
      suppress_xcode_output: true,
      output_types: 'junit,html',
      output_files: 'junit.xml, report.html',
      output_directory: output_directory + options[:test_plan]
    )
    slather(
      circleci: true,
      use_bundle_exec: true,
      output_directory: output_directory + options[:test_plan] + coverage_directory,
      scheme: "TwilioVerify",
      workspace: "TwilioVerify.xcworkspace",
      proj: "TwilioVerify.xcodeproj",
      html: true,
      verbose: false
    )
  end

  lane :build_universal_framework do
    build_app(
      silent: true,
      clean: false,
      scheme: "TwilioVerifySDK",
      workspace: "TwilioVerify.xcworkspace",
      skip_codesigning: true,
      skip_archive: true
    )
  end

  desc "Release a new production version"
  lane :release do
    title = 'iOS Verify Push Release'
    tag_prefix = '*'
    next unless verify(title: title, tag_prefix: tag_prefix)
    incrementVersion()
    # TODO: missing part generate api docs and release to carthage/cocoapods
    post_release()
  end

  desc "Verify next release"
  lane :verify do |options|
    ensure_git_status_clean
    # Check if there is any change since last version
    is_releaseable = analyze_commits(
      match: options[:tag_prefix]
    )
    unless is_releaseable
      UI.important("Skip deploying #{options[:title]}. No changes since last one!")
    end
    is_releaseable
  end

  desc "Increment version"
  lane :incrementVersion do |options|
    next_version = lane_context[SharedValues::RELEASE_NEXT_VERSION]
    ensure_git_status_clean
    # Increment version in Verify module
    UI.message("Updating TwilioVerify/Config/Version.xcconfig")
    sh("./../Scripts/bump-version.swift #{next_version}")
  end

  desc "Generates release tag, release notes and updates CHANGELOG.md"
  lane :post_release do
    next_version = lane_context[SharedValues::RELEASE_NEXT_VERSION]
    notes = conventional_changelog(
      format: 'markdown', 
      commit_url: 'https://github.com/twilio/twilio-verify-ios/commit')
    tag = next_version
    UI.important(notes)
    add_git_tag(tag: tag)
    push_git_tags(tag: tag)

    set_github_release(
      repository_name: "twilio/twilio-verify-ios",
      api_token: ENV["GH_TOKEN"],
      name: tag,
      tag_name: tag,
      description: notes,
      commitish: "main"
    )
    UI.message("Updating CHANGELOG.md")
    sh("echo '#{notes}\\n' | cat - ../CHANGELOG.md > temp && mv temp ../CHANGELOG.md")
    git_commit(path: ['./TwilioVerify/Config/Version.xcconfig', './CHANGELOG.md'], message: "Version bump to #{next_version} [skip ci]")
    push_to_git_remote
  end

end
