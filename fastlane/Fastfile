output_directory = './fastlane/Test Output/'
coverage_directory = '/coverage'
complete_suite = 'CompleteSuite'
single_ftl_device = [{ios_model_id: 'iphone8', ios_version_id: '13.6'}]
all_ftl_devices = [
  {ios_model_id: 'iphone11', ios_version_id: '13.3'},
  {ios_model_id: 'iphonexsmax', ios_version_id: '12.0'},
  {ios_model_id: 'iphonex', ios_version_id: '11.4'},
  {ios_model_id: 'iphonese', ios_version_id: '12.3'}
]

default_platform(:ios)

platform :ios do
  desc "Runs unit tests"
  lane :unit_tests do |options|
    test_plan = options[:test_plan]
    scan(
      scheme: "TwilioVerify",
      testplan: test_plan,
      workspace: "TwilioVerify.xcworkspace",
      device: "iPhone 11",
      reset_simulator: true,
      code_coverage: true,
      suppress_xcode_output: true,
      output_types: 'junit,html',
      output_files: 'junit.xml, report.html',
      output_directory: output_directory + test_plan
    )
    danger_tests id:'UnitTests'
  end

  desc 'Runs integration tests'
  lane :integration_tests do |options|
    test_plan = options[:test_plan]
    ftl_devices = single_ftl_device
    
    if options[:ftl_devices] == 'all'
      ftl_devices = all_ftl_devices
    end

    scan(
      scheme: 'TwilioVerify',
      testplan: test_plan,
      clean: true,
      suppress_xcode_output: true,
      skip_detect_devices: true,
      build_for_testing: true,
      sdk: 'iphoneos',
      should_zip_build_products: true
    )
    firebase_test_lab_ios_xctest(
      oauth_key_file_path: 'gcloud-service-key.json',
      gcp_project: 'twilio-firebase-266721',
      timeout_sec: 300,
      devices: ftl_devices
    )
  end

  desc 'Builds universal framework for release'
  lane :build_universal_framework do
    build_app(
      silent: true,
      clean: false,
      scheme: "TwilioVerifySDK",
      workspace: "TwilioVerify.xcworkspace",
      skip_codesigning: true,
      skip_archive: true
    )
  end

  desc "Release a new production version"
  lane :release do
    title = 'iOS Verify Push Release'
    tag_prefix = '*'
    next unless verify(title: title, tag_prefix: tag_prefix)
    increment_version()
    build_universal_framework()
    sh('zip -r ~/Desktop/TwilioVerify.framework.zip ~/Desktop/TwilioVerify.framework')
    public_api_docs()
    build_swift_package()
    pod_lib_lint(verbose: true)
    post_release()
  end

  desc "Verify next release"
  lane :verify do |options|
    ensure_git_status_clean
    # Check if there is any change since last version
    is_releaseable = analyze_commits(
      match: options[:tag_prefix]
    )
    unless is_releaseable
      UI.important("Skip deploying #{options[:title]}. No changes since last one!")
    end
    is_releaseable
  end

  desc "Increment version"
  lane :increment_version do |options|
    next_version = lane_context[SharedValues::RELEASE_NEXT_VERSION]
    ensure_git_status_clean
    # Increment version in Verify module
    UI.message("Updating TwilioVerify/Config/Version.xcconfig")
    sh("./../Scripts/bump-version.swift #{next_version}")
    version_bump_podspec(
      path: "./TwilioVerify.podspec",
      version_number: "#{next_version}"
    )
  end

  desc 'Generates Public API Documentation'
  lane :public_api_docs do
    next_version = lane_context[SharedValues::RELEASE_NEXT_VERSION]
    UI.message("Generating API docs for version #{next_version}")
    sh('./../Scripts/generate-docs.sh')
  end

  desc "Generates release tag, release notes and updates CHANGELOG.md"
  lane :post_release do
    next_version = lane_context[SharedValues::RELEASE_NEXT_VERSION]
    notes = conventional_changelog(
      format: 'markdown', 
      commit_url: 'https://github.com/twilio/twilio-verify-ios/commit')
    tag = next_version
    UI.important(notes)

    UI.message("Updating CHANGELOG.md")
    sdk_size = sh("cat ~/Desktop/SizeImpact.md")
    changelog = "#{notes}\\n\\n#{sdk_size}"
    sh("echo \"#{changelog}\\n\" | cat - ../CHANGELOG.md > temp && mv temp ../CHANGELOG.md")
    UI.message("Updating README.md")
    last_version = lane_context[SharedValues::RELEASE_LAST_VERSION]
    sh("sed -i '' 's/#{last_version}/#{next_version}/g' ../README.md")
    git_add(path: ['./TwilioVerify/Config/Version.xcconfig', './CHANGELOG.md', './README.md', "./docs/#{next_version}", "./docs/latest", "./TwilioVerify.podspec"])
    sh("git commit -m \"Version bump to #{next_version} [skip ci]\"")
    push_to_git_remote
    
    add_git_tag(tag: tag)
    push_git_tags(tag: tag)

    set_github_release(
      repository_name: "twilio/twilio-verify-ios",
      api_token: ENV["GH_TOKEN"],
      name: tag,
      tag_name: tag,
      description: notes,
      commitish: "main",
      upload_assets: '../Desktop/TwilioVerify.framework.zip'
    )
    
    pod_push(path: "./TwilioVerify.podspec", verbose: true)
  end

  lane :danger_tests do |options|
    danger(
      danger_id: options[:id],
      dangerfile: 'DangerFile',
      github_api_token: ENV["GH_TOKEN"],
      remove_previous_comments: true,
      fail_on_errors: true,
      verbose: true
    )
  end

  lane :build_swift_package do
    sh("swift build -Xswiftc \"-sdk\" -Xswiftc \"`xcrun --sdk iphonesimulator --show-sdk-path`\" -Xswiftc \"-target\" -Xswiftc \"x86_64-apple-ios14.0-simulator\"")
  end

end
